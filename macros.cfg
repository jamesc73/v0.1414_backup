###############################################################
# MACROS
###############################################################


[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    STATUS_PRINTING
    {% set BED_TEMP = params.BED|int %}                   ;Get bed, extruder and chamber temperature from Slicer GCode
    {% set EXTRUDER_TEMP = params.EXTRUDER|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}
    STATUS_HOMING
    M117 Homing...
    G28
    G1 x60 Y60 Z30 F3600    ;Park in middle of bed at 30mm above bed
    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
      SET_DISPLAY_TEXT MSG="Bed: {BED_TEMP}c"             # Displays info
      STATUS_HEATING                                      # Sets SB-leds to heating-mode
      M106 S128                                           # Set part fan to 50%
      SET_FAN_SPEED FAN=nevermore speed=0.5               # Turns on the nevermore to 50%
      M190 S{BED_TEMP}                                    # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Soak for 20min"               # Displays info
      G4 P1200000                                         # Waits 20 min for heatsoak
    # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
    {% else %}
      SET_DISPLAY_TEXT MSG="Bed: {BED_TEMP}c"             # Displays info
      STATUS_HEATING                                      # Sets SB-leds to heating-mode
      M190 S{BED_TEMP}                                    # Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
      G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
    {% endif %}
    # M117 Preheating...
    # STATUS_HEATING
    # SET_FAN_SPEED FAN=nevermore SPEED=0.5
    # M106 S128                 ;Set part fan to 50%
    # M190 S{BED_TEMP}                                 ;Preheat bed 
    {% if printer.extruder.temperature <180 %}       ;Preheat nozzle
        M104 S180
    {% endif %}
    ATTACH_PROBE_LOCK
    G28 Z                        ;Home Z
    G90
    M117 Bed Mesh...
    STATUS_MESHING
    BED_MESH_CALIBRATE           ;Bed mesh
    M117 Homing...
    STATUS_HOMING
    G28 Z                        ;Home Z
    DOCK_PROBE_UNLOCK
    M106 S0                 ;Turn off part fan
    G1 X4 Y80 Z25 F3000        ;Move to cleaning position 
    M117 Nozzle Heating...
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP} T0     ;Heat nozzle to final temperature
    M117 Cleaning
    STATUS_CLEANING
    CLEAN_NOZZLE
    STATUS_PRINTING
    M117 Printer go brrr
    PRIME_EXTRUDER

[gcode_macro PRIME_EXTRUDER]
gcode:
    G1 E5 F1500                      ;Unretract
    G1 X35 Y1.5 F2000
    G1 Z0.28 F2000
    G92 E0
    G1 X35 Y1.5 Z0.28 F2000 E7      ;Draw the first line
    G1 X85 Y1.8 Z0.28 F2000         ;Move to the side a little
    G1 X35 Y1.8 Z0.28 F2000 E14     ;Draw the second line
    G92 E0

[gcode_macro END_PRINT]
#   Use END_PRINT for the slicer ending script - please customize for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-7.5 F1800                 ; retract filament    
    TURN_OFF_HEATERS    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=nevermore SPEED=0.0    ; turn off nevermore
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY
    M117 Print Complete

###############################################################
# M600: Filament Change
###############################################################
# This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
description: Filament change
gcode:
    {% set X = params.X|default(60)|float %}
    {% set Y = params.Y|default(15)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

# [gcode_macro PAUSE]
# description: Pause the current print
# rename_existing: BASE_PAUSE
# gcode:
#     # Parameters
#     {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
#     {% if printer['pause_resume'].is_paused|int == 0 %}     
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
# #        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
#         SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
#         BASE_PAUSE                                                                           ; pause print
#         {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#             G91                                                                              ; relative positioning
#             G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#         {% else %}
#             { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#             SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#         {% endif %}
#         G90                                                                                  ; absolute positioning
#         G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#         SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
# #        M104 S0                                                                              ; turn off hotend
#         SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#     {% endif %}

# [gcode_macro RESUME]
# description: Resume the current print
# rename_existing: BASE_RESUME
# gcode:
#     # Parameters
#     {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
#     {% if printer['pause_resume'].is_paused|int == 1 %}
# #        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                         ; enable filament sensor
# #        RESETRGB                                                                    ; reset LCD color
#         SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#         {% if etemp > 0 %}
#             M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
#         G91                                                                          ; relative positioning
#         M83                                                                          ; relative extruder positioning
#         {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
#             G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#         {% else %}                      
#             G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#         {% endif %}                             
#         RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#         BASE_RESUME                                                                  ; resume print
#     {% endif %}

# [gcode_macro CANCEL_PRINT]
# description: Cancel the current print
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#     SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
#     CLEAR_PAUSE
#     SDCARD_RESET_FILE
#     PRINT_END
#     BASE_CANCEL_PRINT

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

[gcode_macro LEVEL_BED]
gcode:
    STATUS_HOMING
    G28 X Y
    ATTACH_PROBE_LOCK
    G28 Z
    STATUS_CALIBRATING_Z
    SCREWS_TILT_CALCULATE
    DOCK_PROBE_UNLOCK
    STATUS_READY

[gcode_shell_command backup_to_github]
command: sh /home/pi/git_backup.sh
timeout: 30.
verbose: True

[gcode_macro GITHUB_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_to_github
